% \VignetteIndexEntry{SetTutorial}
% \VignetteDepends{Biobase,mgcv}
% \VignetteKeywords{Decision-theoretic gene-set analysis}
% \VignettePackage{Set}
\documentclass[11pt]{article}

\usepackage{epsfig}
\usepackage{latexsym}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsfonts}
\usepackage{amsxtra}
\usepackage{graphicx,subfigure}
\usepackage{vmargin}
\usepackage{natbib}


\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\texttt{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}

\parindent 0in
\setpapersize{USletter}
\setmarginsrb{1truein}{0.5truein}{1truein}{0.5truein}{16pt}{30pt}{0pt}{20truept}
\setlength{\emergencystretch}{2em}
\usepackage{Sweave}
\begin{document}
\SweaveOpts{concordance=TRUE}

\title{\Rpackage{Set} package}
\author{Simina M. Boca \\
  Georgetown University Medical Center \\
  email: \texttt{smb310@georgetown.edu}, \\ \\
  Hector Corrada Bravo \\
  University of Maryland, College Park \\
  email: \texttt{hcorrada@umiacs.umd.edu}, \\ \\
  Giovanni Parmigiani \\
  Dana-Farber Cancer Institute and \\
  Harvard School of Public Health \\ 
  email: \texttt{gp@jimmy.harvard.edu}, \\ \\
  Jeffrey T. Leek \\
  Johns Hopkins Bloomberg School of Public Health \\
  email: \texttt{jleek@jhsph.edu}
}

\maketitle
\tableofcontents

\section{Overview}
Gene-set analysis generally relies on hypothesis testing and
p-values. An alternative approach is to consider a
decision-theoretic method which focuses on estimating
the fraction of non-null genes in a gene-set, which
is more interpretable than traditional approaches
\citep{BocaEtAl2011}. This method uses gene-level statistics
and non-overlapping sets (atoms) as input, and returns the
sets which are in the Bayes estimator for a given loss function.
\par
The \texttt{Set} package implements
the decision-theory approach, allowing users to apply
the main loss function considered in \cite{BocaEtAl2011}:
\begin{eqnarray*}
L(\tau, U) =  (1-w) * \mbox{Number of false discoveries $+w*$ Number of missed discoveries,}
\end{eqnarray*}
where $w$ is a fixed constant between $0$ and $1$,
$\tau$ is the set consisting of all the genes which have
densities from the alternative distribution (for example,
the genes which are differentially expressed), and $U$ represents a
union of sets which is a candidate estimator.
Alternatively, loss functions which penalize for the number of
features or atoms in the Bayes estimator, $L_f^{\lambda}$ and
$L_a^{\xi}$, can be used, as can loss function which penalize both.
Finally, the loss function can use the ratio of false discoveries and 
missed discoveries:
\begin{eqnarray*}
L_r(\tau, U) =  (1-w) * \mbox{Ratio of false discoveries $+w*$ Ratio of missed discoveries,}
\end{eqnarray*}
Minimizing the Bayes risk is equivalent to minimizing the posterior expected
loss, and thus the important quantities which need to be estimated are the
posterior expected number of false discoveries (EFD), the posterior
expected number of missed discoveries (EMD), the posterior expected
ratio of false discoveries (EFDR), and the posterior expected ratio of missed
discoveries (EMDR).
\par
This vignette represents an introduction to the \texttt{Set} package.
Five functions are available, \texttt{postProb}, \texttt{errDisc}, \texttt{bayesEst},
\texttt{enumAtoms}, and \texttt{atomizeSets}. A real data example is also available, taken from
\cite{SubramanianEtAl2005}.

\section{Real data example}
We use one of the datasets from \cite{SubramanianEtAl2005}. It compares mRNA expression
profiles from $15$ males and $17$ females from lymphoblastoid cell lines.
The gene-sets used represented chromosomal regions. We excluded
$40$ of the original $212$ sets, in order to obtain non-overlapping atoms.

To load the data set type \texttt{data(GenderStats)}, and to view a description of this data type \texttt{? GenderStats}. The gene-level statistics
are in the vector \texttt{gene.stat}.
To load the gene-sets type \texttt{data(ChromSets)}, and to view a
description of this data type \texttt{? ChromSets}. The gene-level statistics
are in the vector \texttt{sets}.

<<loadLibrary>>=
library(Set)
data(GenderStats)
data(ChromSets)

head(gene.stat)
head(names(sets))
sets[["chr10q24"]]
@

\section{The \Rfunction{postProb} function}
To implement our method, we must obtain an estimate of the posterior probability for each gene that it is differentially expressed. In order to do this, we must make some assumptions about the null distribution of the expression profiles. We note that the data is approximately normal, with the deviations occuring primarily for very high or very low expression values, as seen from the QQ plot
(as in \cite{IrizarryEtAl2009}):

<<fig=TRUE,include=TRUE>>=
qqnorm(gene.stat)
qqline(gene.stat,col="red",lwd=2)
@

We standardize the gene-level statistics and assume that the null
distribution is normal with mean $0$ and standard deviation $1$. We
now estimate the posterior probabilities, using the method in
\cite{StoreyEtAl2005}. Since the function requires
null statistics, we simulate $20$ datasets using the $N(0,1)$
distribution. We choose the number of intervals in which the observed and null statistics 
are split to be equal to the number of genes.

<<calcPostProbs>>=
gene.stat <- (gene.stat-mean(gene.stat))/sd(gene.stat)

set.seed(70790707)
post.prob.genes <-
    postProb(gene.stat,
             null =
             rnorm(20*length(gene.stat),0,1),
             K = length(gene.stat))
head(post.prob.genes)
@

\section{The \Rfunction{errDisc} function}
We now obtain estimates of the following quantities: the posterior
expected number of false discoveries (EFD), the posterior expected
number of missed discoveries (EMD), the posterior expected fraction of
false discoveries (EFDR), and the posterior expected fraction of missed discoveries (EMDR) for each atom. The result is a matrix. The atomic false discovery rate (afdr) is defined as the posterior expected fraction of false 
discoveries in that atom.

<<calcEFD.EMD>>=
EFD.EMD.res <- errDisc(sets,
                       post.prob.genes)

head(EFD.EMD.res)
@

\section{The \Rfunction{bayesEst} function}
In the case of the loss function used throughout the majority of \cite{BocaEtAl2011}, $L$, it is easy to find the Bayes estimator, by just seeing which atoms have the EFDR below the desired threshold $w$. Alternatively, the \texttt{BayesEst} function can be used. We try this for the values $w=0.75$ and $w=0.97$.

<<getBayesEst>>=
bayesEst(EFD.EMD.res,
         w = 0.75,
         type = "count",
         atom.sizes = sapply(sets, length))
bayesEst(EFD.EMD.res,
         w = 0.97,
         type = "count",
         atom.sizes = sapply(sets, length))
@

The user may desire to penalize for the number of features or the number of atoms, corresponding to the loss functions $L_f^{\lambda}$ and $L_a^{\xi}$, or for both atoms and features. For $L_f^{\lambda}$, we take $\lambda = 0.20$:

<<getBayesEstLambda>>=
bayesEst(EFD.EMD.res,
         w = 0.75,
         type = "count",
         atom.sizes = sapply(sets, length),
         pen.for.feats = 0.20)
bayesEst(EFD.EMD.res,
         w = 0.97,
         type = "count",
         atom.sizes = sapply(sets, length),
         pen.for.feats = 0.20)
@

For $L_a^{\xi}$, we take $\xi = 5$:

<<getBayesEstXi>>=
bayesEst(EFD.EMD.res,
         w = 0.75,
         type = "count",
         atom.sizes = sapply(sets, length),
         pen.for.atoms = 5)
bayesEst(EFD.EMD.res,
         w = 0.97,
         type = "count",
         atom.sizes = sapply(sets, length),
         pen.for.atoms = 5)
@

We can also get the Bayes estimator for the loss function $L_r$, which considers the fraction of false discoveries and missed discoveries, instead of the number of false discoveries and missed discoveries:

<<getBayesEstRatio>>=
bayesEst(EFD.EMD.res,
         w = 0.75,
         type = "ratio",
         atom.sizes = sapply(sets, length))
@

\section{The \Rfunction{enumAtoms} function}
In the example above, the sets considered are not overlapping. In the case of overlapping sets, there are multiple ways of obtaining atoms. One of them is to consider all intersections and set differences of existing sets. The \texttt{enumAtoms} function can be used for this purpose, as seen in the following toy example:

<<enumAtoms>>=
set1 <- 1:50
set2 <- 31:130
set3 <- 131:160
set4 <- c(40:50, 161:260)

sets <- list(set1, set2, set3, set4)
names(sets) <- c("A","B","C","D")

atoms.list <- enumAtoms(sets)

length(atoms.list)

atoms.list
@

\section{The \Rfunction{atomizeSets} function}
The atoms obtained from overlapping sets can be visualized via a type of mosaic plot, using the \texttt{atomizeSets} function. By default, the sets are shown in red, with the atoms being divided by white lines, in a manner proportional to ther size:
<<atomizeExample, fig=TRUE, include=TRUE>>=
atomizeSets(sets)
@

For example, set A is divided between 3 atoms. Their identities can be inferred immediately by looking across the columns: one atom is shared between sets A, B, and D; one atom is shared between sets A and B; one atom is a subset of set A only. Set C however does not overlap any other sets.

The default set colors and background colors can be chosen by the user:
<<atomizeExampleChangeCol, fig=TRUE, include=TRUE>>=
atomizeSets(sets, col="blue", bgCol="white")
@

There is also an option for ordering the atoms by size:
<<atomizeExampleOrderSize, fig=TRUE, include=TRUE>>=
atomizeSets(sets, col="blue", bgCol="white", orderBy="size")
@

Finally, each feature may be assigned a non-negative value (or weight) and the atoms can be ordered by the average of the values for their corresponding features. These values may be, for example, the posterior probabilities of the features truly being from the null distribution, in which case their mean value is equal to the afdr. If non-negative values are used for each feature, then only part of the rectangle corresponding to each atom is shaded in the non-background color, proportional to the mean value of the features within that atom:
<<featureWeights, fig=TRUE, include=TRUE>>=
set.seed(380148)
weights <- rbeta(n=length(unlist(atoms.list)), shape1=0.5, shape2=0.5)

atomizeSets(sets, values=weights, col="blue")
@

If these values are the posterior probabilities of the features being truly null, the afdr for each atom is:
<<afdrCompare>>=
errDisc(atoms.list, 1-weights)[,"EFDR"]
@
Thus, the widths of the rectangles are proportional to these values.

The atoms may be ordered by the mean values assigned to their features:
<<orderMean, fig=TRUE, include=TRUE>>=
atomizeSets(sets, values=weights, col="blue", orderBy="mean")
@

\bibliographystyle{plain}
\bibliography{Set}

\end{document}
